{"version":3,"sources":["shadow/cljs/devtools/client/node.cljs"],"mappings":"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","names":["p__51646","map__51647","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","shadow.cljs.devtools.client.node/node-eval","js","source-map-json","msg","result","js/SHADOW_NODE_EVAL","shadow.cljs.devtools.client.node/is-loaded?","src","goog.object/get","js/SHADOW_IMPORTED","js/Error","shadow.cljs.devtools.client.node/closure-import","js/SHADOW_IMPORT","p__51652","map__51653","shadow.cljs.devtools.client.node/handle-build-complete","runtime","info","reload-info","map__51655","sources","compiled","warnings","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","files-to-require","cljs.core.remove","p__51660","map__51661","ns","cljs.core/contains?","cljs.core.filter","p__51657","map__51658","resource-id","cljs.core.map","cljs.core.into","cljs.core/seq","shadow.cljs.devtools.client.env.do_js_reload","seq__51663","chunk__51664","count__51665","i__51666","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.node/client-info","js/process.version","shadow.cljs.devtools.client.node/start","ws-url","shadow.cljs.devtools.client.env/get-ws-relay-url","socket","js/shadow.js.shim.module$ws","ws-active-ref","cljs.core.atom","data","cljs.core/deref","shadow.cljs.devtools.client.shared/remote-msg","e","shadow.cljs.devtools.client.shared/remote-open","shadow.cljs.devtools.client.shared/remote-close","shadow.cljs.devtools.client.shared/remote-error","p__51676","map__51677","shadow.cljs.devtools.client.node/send","p__51683","map__51684","shadow.cljs.devtools.client.node/stop","cljs.core/reset!","shadow.cljs.devtools.client.env/worker-client-id","shadow.cljs.devtools.client.shared/Runtime","this","code","p__51705","map__51706","repl-sources","done","error","e51712","seq__51713","chunk__51715","count__51716","i__51717","map__51724","map__51727","output-name","p__51729","map__51730","reload-namespaces","e51732","seq__51733","chunk__51734","count__51735","i__51736","map__51741","map__51743","provides","or__4126__auto__","cljs.core/some","shadow.cljs.devtools.client.shared/add-plugin!","p__51745","map__51746","env","svc","shadow.remote.runtime.api/add-extension","shadow.cljs.devtools.client.env/patch-goog!","shadow.cljs.devtools.client.env/log","js/console.log","js/console.warn","js/console.error","shadow.cljs.devtools.client.env/run-custom-notify!","cljs.core.assoc","shadow.cljs.devtools.client.env/add-warnings-to-info","p__51750","map__51751","event-op","client-id","cljs.core._EQ_","p__51754","map__51755","shadow.remote.runtime.api/del-extension","shadow.cljs.devtools.client.shared/init-runtime!"],"sourcesContent":["(ns shadow.cljs.devtools.client.node\n  (:require\n    [\"ws\" :as ws]\n    [cljs.reader :as reader]\n    [goog.object :as gobj]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.cljs.devtools.client.shared :as cljs-shared]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]))\n\n(defn node-eval [{:keys [js source-map-json] :as msg}]\n  (let [result (js/SHADOW_NODE_EVAL js source-map-json)]\n    result))\n\n(defn is-loaded? [src]\n  (true? (gobj/get js/SHADOW_IMPORTED src)))\n\n(defn closure-import [src]\n  {:pre [(string? src)]}\n  (js/SHADOW_IMPORT src))\n\n(defn handle-build-complete\n  [runtime {:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled warnings]} info]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n\n      (let [files-to-require\n            (->> sources\n                 (remove (fn [{:keys [ns]}]\n                           (contains? (:never-load reload-info) ns)))\n                 (filter (fn [{:keys [ns resource-id]}]\n                           (or (contains? compiled resource-id)\n                               (contains? (:always-load reload-info) ns))))\n                 (map :output-name)\n                 (into []))]\n\n        (when (seq files-to-require)\n          (env/do-js-reload\n            msg\n            #(doseq [src files-to-require]\n               (env/before-load-src src)\n               (closure-import src))\n            ))))))\n\n(def client-info\n  {:host :node\n   :desc (str \"Node \" js/process.version)})\n\n(defn start [runtime]\n  (let [ws-url\n        (env/get-ws-relay-url)\n\n        socket\n        (ws. ws-url #js {:rejectUnauthorized false})\n\n        ws-active-ref\n        (atom true)]\n\n    (.on socket \"message\"\n      (fn [data]\n        (when @ws-active-ref\n          (cljs-shared/remote-msg runtime data))))\n\n    (.on socket \"open\"\n      (fn [e]\n        (when @ws-active-ref\n          (cljs-shared/remote-open runtime e))))\n\n    (.on socket \"close\"\n      (fn [e]\n        (when @ws-active-ref\n          (cljs-shared/remote-close runtime e))))\n\n    (.on socket \"error\"\n      (fn [e]\n        (when @ws-active-ref\n          (cljs-shared/remote-error runtime e))))\n\n    {:socket socket\n     :ws-active-ref ws-active-ref}))\n\n(defn send [{:keys [socket]} msg]\n  (.send socket msg))\n\n(defn stop [{:keys [socket ws-active-ref]}]\n  (reset! ws-active-ref false)\n  (.close socket))\n\n;; want things to start when this ns is in :preloads\n(when (pos? env/worker-client-id)\n\n  (extend-type cljs-shared/Runtime\n    api/IEvalJS\n    (-js-eval [this code]\n      (js/SHADOW_NODE_EVAL code))\n\n    cljs-shared/IHostSpecific\n    (do-invoke [this msg]\n      (node-eval msg))\n\n    (do-repl-init [runtime {:keys [repl-sources]} done error]\n      (try\n        (doseq [{:keys [output-name] :as src} repl-sources\n                :when (not (is-loaded? output-name))]\n          (closure-import output-name))\n\n        (done)\n        (catch :default e\n          (error e))))\n\n    (do-repl-require [this {:keys [sources reload-namespaces] :as msg} done error]\n      (try\n        (doseq [{:keys [provides output-name] :as src} sources]\n          (when (or (not (is-loaded? output-name))\n                    (some reload-namespaces provides))\n            (closure-import output-name)))\n\n        (done)\n        (catch :default e\n          (error e)))))\n\n  (cljs-shared/add-plugin! ::client #{}\n    (fn [{:keys [runtime] :as env}]\n      (let [svc {:runtime runtime}]\n        (api/add-extension runtime ::client\n          {:on-welcome\n           (fn []\n             ;; FIXME: why does this break stuff when done when the namespace is loaded?\n             ;; why does it have to wait until the websocket is connected?\n             (env/patch-goog!)\n             (when env/log\n               (js/console.log (str \"shadow-cljs - #\" (-> runtime :state-ref deref :client-id) \" ready!\"))))\n\n           :on-disconnect\n           (fn []\n             (js/console.warn \"The shadow-cljs Websocket was disconnected.\"))\n\n           :ops\n           {:access-denied\n            (fn [msg]\n              (js/console.error\n                (str \"Stale Output! Your loaded JS was not produced by the running shadow-cljs instance.\"\n                     \" Is the watch for this build running?\")))\n\n            :cljs-build-configure\n            (fn [msg])\n\n            :cljs-build-start\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-start\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-start)))\n\n            :cljs-build-complete\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-complete\" msg)\n              (let [msg (env/add-warnings-to-info msg)]\n                (handle-build-complete runtime msg)\n                (env/run-custom-notify! (assoc msg :type :build-complete))))\n\n            :cljs-build-failure\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-failure\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-failure)))\n\n            ::env/worker-notify\n            (fn [{:keys [event-op client-id]}]\n              (cond\n                (and (= :client-disconnect event-op)\n                     (= client-id env/worker-client-id))\n                (js/console.warn \"shadow-cljs - The watch for this build was stopped!\")\n\n                (= :client-connect event-op)\n                (js/console.warn \"shadow-cljs - A new watch for this build was started, restart of this process required!\")\n\n                :else\n                nil))\n            }})\n        svc))\n\n    (fn [{:keys [runtime] :as svc}]\n      (api/del-extension runtime ::client)))\n\n  (cljs-shared/init-runtime! client-info start send stop))\n"]}